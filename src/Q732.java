import java.util.Map;
import java.util.TreeMap;

public class Q732 {

    public static void main(String[] args) {
//        MyCalendarTwo c = new Q732().new MyCalendarTwo();
////        int[][] tests = new int[][]{{21, 22}, {86, 87}, {71, 72}, {76, 77}, {50, 51}, {92, 93}, {99, 100}, {5, 6}, {71, 72}, {42, 43}, {72, 73}, {22, 23}, {51, 52}, {15, 16}, {70, 71}, {64, 65}, {57, 58}, {47, 48}, {4, 5}, {14, 15}, {2, 3}, {28, 29}, {35, 36}, {86, 87}, {72, 73}};
//        int[][] tests = new int[][]{{825, 884}, {5775, 5828}, {3058, 3099}, {1498, 1548}, {7212, 7255}, {3274, 3325}, {3348, 3407}, {3960, 4018}, {2556, 2592}, {5024, 5061}, {3004, 3042}, {1979, 2012}, {2502, 2549}, {1748, 1793}, {2520, 2568}, {5354, 5399}, {8521, 8575}, {8962, 9009}, {2847, 2880}, {2737, 2786}, {2920, 2952}, {625, 680}, {6482, 6515}, {9676, 9710}, {3788, 3828}, {3965, 4003}, {2306, 2351}, {4376, 4426}, {9537, 9579}, {1476, 1515}, {3103, 3138}, {678, 719}, {2163, 2208}, {5762, 5807}, {9942, 9989}, {7453, 7498}, {1668, 1727}, {9104, 9138}, {7479, 7511}, {7133, 7183}, {2128, 2171}, {6786, 6830}, {9505, 9548}, {9088, 9128}, {7383, 7421}, {1115, 1153}, {6405, 6441}, {4366, 4397}, {5330, 5377}, {8360, 8407}, {514, 551}, {2260, 2302}, {7694, 7752}, {7559, 7607}, {809, 862}, {8550, 8607}, {8717, 8754}, {1737, 1788}, {3387, 3422}, {3197, 3255}, {1753, 1803}, {8503, 8536}, {2250, 2284}, {984, 1018}, {8961, 9020}, {9360, 9413}, {9681, 9725}, {1246, 1278}, {4598, 4652}, {195, 225}, {2459, 2491}, {5168, 5223}, {8756, 8811}, {2089, 2126}, {3966, 4016}, {5314, 5372}, {5146, 5177}, {7971, 8026}, {5926, 5957}, {3122, 3173}, {4914, 4949}, {2863, 2905}, {5496, 5555}, {382, 429}, {4917, 4973}, {5195, 5249}, {5639, 5670}, {9524, 9561}, {7258, 7309}, {1284, 1332}, {7850, 7892}, {25, 55}, {5121, 5177}, {9448, 9486}, {5549, 5584}, {455, 511}, {3010, 3064}, {1666, 1717}, {4628, 4673}, {1043, 1100}, {5499, 5533}, {4816, 4846}, {80, 118}, {6352, 6383}, {5171, 5210}, {1843, 1888}, {6710, 6762}, {4968, 5007}, {9968, 10000}, {7690, 7720}, {7362, 7393}, {5267, 5314}, {7669, 7719}, {3613, 3647}, {1407, 1458}, {3, 48}, {4720, 4777}, {5062, 5093}, {373, 427}, {8499, 8545}, {7277, 7310}, {9284, 9326}, {3160, 3208}, {9220, 9271}, {8479, 8514}, {5800, 5856}, {7011, 7045}, {3301, 3331}, {9390, 9446}, {3997, 4029}, {206, 262}, {4137, 4181}, {6879, 6911}, {7858, 7899}, {5599, 5642}, {1431, 1467}, {3286, 3345}, {9401, 9443}, {3157, 3189}, {3494, 3551}, {9445, 9500}, {8062, 8118}, {6834, 6884}, {8392, 8430}, {782, 823}, {4563, 4622}, {1358, 1397}, {8807, 8839}, {2650, 2694}, {6146, 6180}, {6732, 6783}, {1432, 1485}, {8784, 8818}, {481, 520}, {7871, 7923}, {4407, 4466}, {7031, 7078}, {7241, 7279}, {6954, 7003}, {2365, 2399}, {5234, 5278}, {9088, 9143}, {5779, 5838}, {5893, 5934}, {9251, 9293}, {4467, 4514}, {4682, 4726}, {1871, 1906}, {3815, 3873}, {7887, 7930}, {9357, 9398}, {2388, 2419}, {3322, 3370}, {7169, 7225}, {8665, 8697}, {6492, 6548}, {3755, 3789}, {1327, 1384}, {8986, 9041}, {6404, 6447}, {9268, 9302}, {4801, 4851}, {4239, 4289}, {5447, 5491}, {2039, 2095}, {2828, 2866}, {3440, 3470}, {3170, 3227}, {9909, 9947}, {4436, 4478}, {6007, 6044}, {5439, 5488}, {888, 933}, {2970, 3010}, {805, 852}, {1460, 1490}, {2579, 2626}, {3258, 3316}, {1238, 1270}, {6952, 6989}, {6145, 6202}, {8991, 9047}, {761, 817}, {5742, 5789}, {6521, 6560}, {9652, 9698}, {823, 871}, {7236, 7293}, {3260, 3294}, {2636, 2677}, {9361, 9417}, {9294, 9346}, {4902, 4935}, {5139, 5195}, {3793, 3834}, {968, 1026}, {1805, 1835}, {7840, 7891}, {3284, 3329}, {6925, 6962}, {6532, 6576}, {7906, 7960}, {1284, 1341}, {2145, 2187}, {2240, 2275}, {6981, 7016}, {1772, 1822}, {7735, 7788}, {3983, 4042}, {892, 948}, {2213, 2246}, {9142, 9197}, {6641, 6685}, {8724, 8756}, {7473, 7531}, {3177, 3217}, {8048, 8093}, {2319, 2365}, {186, 235}, {3616, 3661}, {3543, 3592}, {4041, 4080}, {7832, 7891}, {2107, 2146}, {4515, 4564}, {5805, 5844}, {2054, 2109}, {3013, 3045}, {1650, 1699}, {3615, 3672}, {8783, 8822}, {4966, 5017}, {9272, 9302}, {4670, 4709}, {4503, 4545}, {2955, 2985}, {8354, 8393}, {2153, 2193}, {4632, 4691}, {7253, 7286}, {4117, 4161}, {8901, 8936}, {5141, 5189}, {1961, 2009}, {6567, 6625}, {3609, 3659}, {9712, 9748}, {9649, 9699}, {4559, 4596}, {3325, 3374}, {6340, 6383}, {4744, 4781}, {9837, 9895}, {9592, 9634}, {4789, 4833}, {261, 317}, {1297, 1337}, {3721, 3772}, {7111, 7153}, {1686, 1740}, {2489, 2527}, {4262, 4307}, {9353, 9395}, {1592, 1651}, {722, 761}, {3394, 3436}, {7071, 7119}, {4900, 4955}, {3105, 3157}, {3297, 3341}, {3675, 3732}, {7870, 7921}, {7992, 8049}, {4572, 4605}, {213, 252}, {4477, 4527}, {3903, 3939}, {5417, 5458}, {4260, 4309}, {4712, 4756}, {3603, 3658}, {8855, 8885}, {4076, 4120}, {2299, 2354}, {5645, 5702}, {2026, 2072}, {3827, 3862}, {8000, 8041}, {9397, 9446}, {5891, 5933}, {9724, 9769}, {2949, 2994}, {7675, 7714}, {1981, 2021}, {37, 72}, {2052, 2101}, {2110, 2146}, {9334, 9378}, {6022, 6077}, {7208, 7265}, {4100, 4144}, {5450, 5498}, {9846, 9889}, {8448, 8507}, {2586, 2624}, {7707, 7754}, {7818, 7863}, {5149, 5183}, {3312, 3348}, {1155, 1193}, {4195, 4252}, {8729, 8770}, {860, 902}, {9892, 9928}, {682, 735}, {1020, 1055}, {748, 800}, {4460, 4513}, {9658, 9715}, {1609, 1668}, {2136, 2168}, {1330, 1385}, {932, 963}, {6918, 6965}, {5563, 5594}, {8818, 8875}, {9032, 9078}, {4929, 4977}, {1178, 1230}, {1643, 1683}, {8667, 8716}, {1269, 1302}, {9351, 9399}, {9569, 9628}, {6214, 6259}, {2992, 3046}, {6412, 6466}, {3772, 3807}, {91, 150}, {6952, 6994}, {6546, 6598}, {1669, 1724}, {7547, 7595}, {5191, 5245}, {4139, 4192}, {3239, 3280}, {1474, 1519}, {549, 604}, {7333, 7385}, {9201, 9240}, {444, 480}, {9960, 10000}, {6300, 6355}, {6366, 6415}, {9442, 9483}, {367, 421}, {2798, 2857}, {7301, 7356}, {5331, 5381}, {7603, 7646}, {4713, 4753}, {3749, 3808}, {3254, 3312}, {3237, 3295}, {4961, 5000}, {2214, 2263}, {3513, 3570}, {1946, 1980}, {6826, 6868}, {2035, 2068}, {1599, 1646}, {275, 305}, {5132, 5167}, {7730, 7776}, {4214, 4252}, {3771, 3821}, {7163, 7211}, {6049, 6079}, {5516, 5562}, {304, 359}, {7299, 7357}, {6231, 6273}, {6352, 6383}, {798, 852}, {7605, 7640}, {1263, 1306}, {5769, 5820}, {8335, 8378}, {7314, 7363}, {2303, 2338}, {5232, 5278}, {3348, 3403}, {6348, 6389}, {114, 151}, {5448, 5481}, {7216, 7249}, {7317, 7371}, {7605, 7650}, {74, 125}, {4470, 4528}, {9322, 9357}, {7025, 7061}, {5880, 5930}, {2351, 2409}, {8231, 8279}, {3751, 3810}, {9458, 9489}, {9018, 9048}, {7761, 7812}, {4098, 4133}, {2647, 2706}, {7498, 7534}, {0, 36}, {9484, 9540}, {5444, 5486}, {1540, 1574}, {5366, 5396}, {318, 360}, {5265, 5314}, {4071, 4120}, {1700, 1740}, {3416, 3463}, {7789, 7826}, {6194, 6239}, {9760, 9798}, {3299, 3353}, {5106, 5145}, {4082, 4121}, {3434, 3471}, {9137, 9180}, {4684, 4740}, {5243, 5299}, {1870, 1916}, {3498, 3544}, {554, 607}, {169, 207}, {9672, 9716}, {3957, 4011}, {4566, 4608}, {4484, 4542}, {8687, 8722}, {3555, 3598}, {5824, 5875}, {4371, 4418}, {8377, 8408}, {9134, 9179}, {5685, 5716}, {5607, 5654}, {9597, 9652}, {4156, 4198}, {9888, 9947}, {4186, 4242}, {55, 89}, {8437, 8475}, {7266, 7299}, {470, 516}, {7352, 7385}, {6516, 6548}, {1012, 1058}, {5179, 5228}, {43, 98}, {2261, 2293}, {6609, 6655}, {1708, 1746}, {7322, 7369}, {3070, 3101}, {5794, 5853}, {7808, 7861}, {6413, 6460}, {1019, 1073}, {4352, 4387}, {1201, 1258}, {1206, 1245}, {2892, 2928}, {9705, 9746}, {2758, 2806}, {3213, 3257}, {303, 358}, {2667, 2708}, {6372, 6419}, {1998, 2043}, {364, 423}, {2748, 2781}, {7144, 7181}, {4183, 4218}, {6467, 6521}, {4765, 4824}, {4115, 4159}, {5496, 5539}, {1785, 1837}, {6838, 6890}, {959, 989}, {8025, 8080}, {6922, 6969}, {5724, 5757}, {9056, 9114}, {3296, 3326}, {1129, 1159}, {8146, 8176}, {4053, 4088}, {7068, 7108}, {6012, 6042}, {9228, 9284}, {6097, 6134}, {1563, 1620}, {7247, 7304}, {3249, 3281}, {7672, 7728}, {4349, 4406}, {7208, 7240}, {1368, 1413}, {8538, 8597}, {1711, 1754}, {927, 981}, {6568, 6605}, {4802, 4845}, {9895, 9951}, {5936, 5981}, {251, 287}, {9608, 9645}, {2825, 2873}, {6654, 6708}, {3180, 3217}, {9759, 9814}, {3594, 3640}, {5949, 5986}, {4193, 4251}, {6671, 6730}, {2009, 2058}, {5618, 5661}, {5168, 5226}, {4202, 4241}, {7500, 7558}, {9628, 9661}, {5697, 5754}, {5013, 5048}, {4649, 4679}, {777, 818}, {5563, 5619}, {4848, 4902}, {4589, 4632}, {7201, 7246}, {7289, 7328}, {7519, 7578}, {9032, 9072}, {4881, 4927}, {6800, 6846}, {6342, 6392}, {1911, 1965}, {3432, 3473}, {4641, 4678}, {9451, 9498}, {7893, 7949}, {8614, 8649}, {6393, 6426}, {1554, 1610}, {9799, 9836}, {3071, 3112}, {1425, 1458}, {321, 371}, {9477, 9529}, {6673, 6723}, {9133, 9188}, {2923, 2960}, {6010, 6043}, {6058, 6096}, {8250, 8280}, {2147, 2197}, {9440, 9489}, {8283, 8320}, {6010, 6052}, {1638, 1673}, {9271, 9303}, {9937, 9990}, {372, 410}, {5291, 5346}, {2919, 2960}, {8967, 9019}, {9947, 9992}, {5576, 5613}, {3292, 3350}, {8217, 8267}, {2011, 2069}, {641, 691}, {9132, 9176}, {8496, 8547}, {3940, 3988}, {4956, 5002}, {3529, 3574}, {9673, 9710}, {839, 880}, {2263, 2318}, {3567, 3601}, {8790, 8825}, {5649, 5682}, {3382, 3435}, {9218, 9251}, {7908, 7942}, {3416, 3467}, {7009, 7062}, {3640, 3674}, {756, 808}, {4281, 4312}, {7634, 7680}, {1086, 1131}, {6527, 6567}, {9319, 9374}, {9422, 9456}, {5839, 5894}, {6380, 6428}, {6518, 6577}, {3278, 3311}, {4603, 4655}, {6137, 6185}, {9950, 9984}, {7994, 8031}, {4833, 4891}, {2895, 2929}, {5776, 5816}, {8128, 8187}, {3989, 4042}, {1635, 1676}, {8093, 8143}, {5625, 5671}, {4768, 4817}, {9780, 9832}, {6320, 6363}, {3514, 3563}, {7126, 7159}, {8987, 9041}, {5091, 5148}, {135, 166}, {3520, 3554}, {2736, 2783}, {5573, 5623}, {5518, 5561}, {8790, 8835}, {4464, 4514}, {9542, 9590}, {2325, 2359}, {3723, 3773}, {5405, 5437}, {4844, 4874}, {2326, 2373}, {5649, 5706}, {8455, 8503}, {8757, 8807}, {9968, 10000}, {6639, 6687}, {7999, 8032}, {5537, 5582}, {8112, 8159}, {9784, 9839}, {5729, 5772}, {667, 725}, {8496, 8549}, {3875, 3906}, {8038, 8092}, {1715, 1754}, {8487, 8526}, {8271, 8319}, {7438, 7487}, {6696, 6726}, {1138, 1181}, {1823, 1860}, {4731, 4774}, {6662, 6716}, {2633, 2679}, {6047, 6077}, {3667, 3722}, {190, 225}, {6697, 6732}, {4926, 4963}, {2657, 2712}, {867, 912}, {9767, 9817}, {2702, 2734}, {6000, 6043}, {9130, 9181}, {9089, 9147}, {7534, 7571}, {2030, 2079}, {2072, 2111}, {9499, 9543}, {5041, 5079}, {8755, 8795}, {3977, 4012}, {7947, 7979}, {9878, 9911}, {5593, 5651}, {3981, 4020}, {3017, 3069}, {4993, 5031}, {2471, 2504}, {6288, 6336}, {924, 970}, {1447, 1487}, {6763, 6818}, {2860, 2907}, {9065, 9102}, {1731, 1787}, {3630, 3669}, {7372, 7409}, {233, 273}, {7610, 7642}, {4152, 4188}, {9765, 9823}, {5839, 5880}, {9178, 9220}, {2135, 2169}, {1346, 1382}, {687, 730}, {13, 54}, {4849, 4896}, {8038, 8088}, {4711, 4770}, {2214, 2270}, {9978, 10000}, {6202, 6250}, {5263, 5296}, {6455, 6504}, {4555, 4614}, {8104, 8140}, {9254, 9297}, {7154, 7195}, {7603, 7648}, {6944, 6993}, {6656, 6701}, {8557, 8614}, {3216, 3269}, {2128, 2175}, {9755, 9810}, {8396, 8427}, {5257, 5314}, {9747, 9796}, {44, 86}, {8172, 8217}, {6225, 6270}, {859, 912}, {1071, 1102}, {4122, 4175}, {8995, 9052}, {6063, 6117}, {9793, 9826}, {5562, 5619}, {9383, 9427}, {4689, 4742}, {2311, 2355}, {4316, 4374}, {1073, 1120}, {6601, 6660}, {8420, 8452}, {590, 642}, {1756, 1813}, {6154, 6213}, {3105, 3155}, {7081, 7135}, {3069, 3100}, {8717, 8751}, {3279, 3309}, {8031, 8081}, {8918, 8952}, {7619, 7675}, {9651, 9686}, {32, 81}, {4298, 4353}, {5600, 5654}, {3139, 3176}, {9736, 9788}, {4491, 4532}, {4768, 4803}, {1088, 1126}, {6392, 6445}, {6187, 6231}, {5524, 5575}, {6629, 6675}, {7155, 7207}, {5527, 5558}, {1361, 1397}, {1706, 1738}, {6827, 6866}, {5907, 5965}, {2340, 2386}, {1777, 1833}, {7098, 7130}, {5226, 5264}, {2032, 2084}, {6136, 6182}, {900, 930}, {9921, 9958}, {2355, 2394}, {5501, 5535}, {3399, 3450}, {3324, 3376}, {7760, 7819}, {2269, 2316}, {5411, 5444}, {4130, 4172}, {5579, 5613}, {7152, 7195}, {9593, 9639}, {8273, 8319}, {4504, 4560}, {5753, 5800}, {2172, 2229}, {980, 1030}, {5527, 5585}, {2234, 2285}, {1689, 1743}, {7827, 7869}, {6782, 6837}, {6027, 6068}, {4561, 4614}, {3160, 3195}, {3256, 3310}, {8079, 8135}, {8657, 8698}, {8795, 8831}, {8821, 8866}, {3468, 3524}, {9392, 9441}, {391, 433}, {8453, 8484}, {6605, 6658}, {1486, 1518}, {7, 54}, {5056, 5100}, {1979, 2009}, {9624, 9675}, {8911, 8959}, {3250, 3285}, {7909, 7948}, {740, 778}, {1025, 1074}, {7107, 7146}, {7373, 7431}, {5098, 5144}, {823, 882}, {8266, 8322}, {3031, 3083}, {8967, 9018}, {6556, 6596}, {4440, 4487}, {1118, 1158}, {7652, 7698}, {2922, 2952}, {3701, 3732}, {7163, 7210}, {209, 256}, {7272, 7319}, {3472, 3528}, {8131, 8177}, {2179, 2221}, {1959, 2010}, {5746, 5783}, {4157, 4216}, {3921, 3961}, {6796, 6844}, {2273, 2330}, {7493, 7550}, {8979, 9009}, {2322, 2358}, {8096, 8150}, {3032, 3074}, {6115, 6152}, {517, 555}, {3042, 3081}, {1080, 1135}, {4642, 4672}, {4408, 4462}, {3852, 3900}, {516, 557}, {8204, 8260}, {247, 304}, {6400, 6434}, {4353, 4396}, {25, 72}, {6745, 6789}, {844, 891}, {3244, 3277}, {1937, 1986}, {1457, 1514}, {8035, 8072}, {4272, 4304}, {4665, 4712}, {2552, 2610}, {2154, 2191}, {9866, 9899}, {427, 469}, {6921, 6979}, {7339, 7382}, {6928, 6985}, {9078, 9121}, {1053, 1094}, {9474, 9506}, {7697, 7727}, {9538, 9581}, {7441, 7474}, {8628, 8660}, {556, 596}, {4654, 4703}, {6278, 6319}, {8870, 8919}, {9198, 9255}, {8719, 8760}, {7606, 7659}, {4244, 4281}, {553, 587}, {5448, 5498}, {9503, 9540}, {1653, 1688}, {8506, 8554}, {9567, 9615}, {9744, 9795}, {7217, 7262}, {9268, 9320}, {6390, 6436}, {8661, 8701}, {3439, 3475}, {4282, 4315}, {2210, 2247}, {9400, 9441}, {6563, 6607}, {7320, 7351}, {4562, 4618}, {781, 840}, {4259, 4293}, {7782, 7825}, {8864, 8914}, {1098, 1134}, {5553, 5604}, {4783, 4826}, {1118, 1149}, {3089, 3131}, {7732, 7782}, {9823, 9868}, {1044, 1094}, {8468, 8505}, {1485, 1526}, {7756, 7796}, {1662, 1721}, {5548, 5591}, {145, 184}, {7912, 7968}, {3753, 3785}, {1007, 1037}, {9767, 9805}, {9287, 9320}, {9982, 10000}, {4257, 4313}, {5644, 5687}, {4959, 5003}, {5574, 5607}, {6508, 6557}, {1716, 1766}, {4775, 4825}, {8405, 8460}, {7400, 7438}, {4354, 4400}, {5166, 5202}, {1158, 1214}, {3142, 3179}, {8993, 9046}, {1893, 1934}, {9480, 9512}, {6380, 6428}, {4627, 4680}, {3930, 3970}, {819, 869}, {398, 453}, {4855, 4914}, {2036, 2081}, {6933, 6973}, {3054, 3103}, {7409, 7442}, {8844, 8888}, {2524, 2581}, {5658, 5693}, {7368, 7427}, {3915, 3971}
//        };
//        boolean[] result = new boolean[]{true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, false, true, true, true, true, true, true, false, true, true, true, true, true, false, true, true, true, false, true, true, true, true, true, true, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, false, false, true, false, true, true, false, true, true, true, false, false, true, true, true, true, true, true, false, false, true, false, true, true, true, true, true, false, true, false, true, true, true, true, false, true, false, true, true, true, true, true, true, false, true, true, false, true, true, true, false, false, false, true, false, false, false, true, true, false, true, false, false, false, true, true, false, false, false, false, true, false, false, false, false, false, true, false, true, true, true, true, true, false, false, true, true, false, true, true, true, false, true, true, false, false, false, false, false, false, false, false, true, true, true, false, false, false, false, true, true, false, true, true, false, true, false, false, true, true, true, true, true, false, true, false, true, true, false, false, true, false, true, true, false, true, false, false, false, true, false, true, false, false, false, true, false, false, false, false, true, true, false, true, true, false, false, false, false, false, false, false, false, false, false, false, true, true, false, false, false, true, false, false, false, false, false, false, true, true, false, false, true, true, true, true, false, false, true, false, false, false, false, true, true, true, false, true, false, true, false, false, true, true, false, false, false, true, false, false, false, true, false, false, false, false, true, false, true, true, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, true, false, false, true, true, false, false, false, false, true, false, false, false, true, false, false, false, false, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, true, true, false, false, true, false, false, false, true, false, true, false, false, false, true, true, false, true, false, true, false, false, true, false, false, false, false, true, false, false, false, false, false, false, true, true, false, false, false, true, false, false, false, false, false, true, true, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, true, true, false, true, true, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, true, false, false, true, true, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, true, false, false, false, true, false, false, false, false, false, true, false, true, false, false, false, true, false, false, false, false, false, false, false, false, true, false, false, false, true, true, false, false, true, false, false, true, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, true, false, false, false, true, true, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false, false, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, true, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false};
//        for (int i = 0; i < tests.length; i++) {
////            if(tests[i][0]==4801&& tests[i][1]==4851){
////                break;
////            }
//            if (c.book(tests[i][0], tests[i][1]) != result[i]) {
//                System.out.println(Arrays.toString(tests[i]));
//                System.out.println(result[i]);
//                break;
//            }
//        }
        //        c.book(34,39);
//        c.book(40,49);
    }

    class MyCalendarThree {

        TreeMap<Integer, int[]> map;
        int max = 0;

        public MyCalendarThree() {
            map = new TreeMap<>();
        }

        public int book(int start, int end) {
            Map.Entry<Integer, int[]> floor = map.floorEntry(start);
            if (floor != null) {
                if (floor.getValue()[0] > end) {
                    map.put(floor.getKey(), new int[]{start, floor.getValue()[1]});
                    map.put(start, new int[]{end, floor.getValue()[1] + 1});
                    map.put(end, new int[]{floor.getValue()[0], floor.getValue()[1]});
                    max = Math.max(max, floor.getValue()[1] + 1);
                    return max;
                }
                if (floor.getValue()[0] > start) {
                    map.put(floor.getKey(), new int[]{start, floor.getValue()[1]});
                    map.put(start, new int[]{floor.getValue()[0], floor.getValue()[1] + 1});
                    max = Math.max(max, floor.getValue()[1] + 1);
                    start = floor.getValue()[0];
                }
            }
            for (Map.Entry<Integer, int[]> entry : new TreeMap<>(map.subMap(start, end)).entrySet()) {
                if (entry.getValue()[0] > end) {
                    map.put(start, new int[]{entry.getKey(), 1});
                    map.put(entry.getKey(), new int[]{end, entry.getValue()[1] + 1});
                    map.put(end, new int[]{entry.getValue()[0], entry.getValue()[1]});
                    max = Math.max(max, entry.getValue()[1] + 1);
                    return max;
                } else {
                    map.put(start, new int[]{entry.getKey(), 1});
                    map.put(entry.getKey(), new int[]{entry.getValue()[0], entry.getValue()[1] + 1});
                    max = Math.max(max, entry.getValue()[1] + 1);
                    start = entry.getValue()[0];
                }
            }
            if (start != end) {
                map.put(start, new int[]{end, 1});
                max = Math.max(max, 1);
            }
            return max;
        }
    }

}
