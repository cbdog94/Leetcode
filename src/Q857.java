import java.util.Arrays;
import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.Queue;

public class Q857 {
    public static void main(String[] args) {
        System.out.println(new Q857().mincostToHireWorkers(new int[]{10, 20, 5}, new int[]{70, 50, 30}, 2));
        System.out.println(new Q857().mincostToHireWorkers(new int[]{3, 1, 10, 10, 1}, new int[]{4, 8, 2, 2, 7}, 3));
        System.out.println(new Q857().mincostToHireWorkers(new int[]{4, 5}, new int[]{8, 14}, 2));
        System.out.println(new Q857().mincostToHireWorkers(new int[]{222, 347, 275, 415, 50, 374, 357, 118, 310, 357, 65, 215, 289, 130, 77, 172, 27, 57, 230, 247, 397, 88, 414, 371, 479, 179, 206, 6, 99, 432, 100, 499, 195, 278, 232, 186, 200, 165, 222, 54, 5, 432, 267, 333, 38, 154, 371, 301, 173, 385, 289, 485, 469, 158, 40, 256, 17, 490, 378, 433, 3, 84, 54, 484, 451, 420, 403, 160, 369, 132, 161, 29, 43, 304, 14, 460, 419, 16, 288, 397, 438, 372, 290, 490, 337, 455, 458, 129, 257, 231, 231, 80, 226, 86, 469, 341, 430, 358, 185, 203, 476, 489, 176, 390, 220, 18, 244, 239, 187, 180, 402, 12, 458, 273, 293, 498, 479, 199, 100, 281, 129, 272, 161, 41, 5, 61, 341, 139, 215, 438, 490, 192, 78, 399, 360, 362, 414, 334, 30, 330, 450, 202, 36, 113, 328, 185, 31, 64, 58, 132, 371, 240, 325, 188, 15, 243, 300, 343, 212, 236, 86, 30, 110, 112, 158, 246, 36, 494, 441, 441, 295, 320, 271, 216, 117, 73, 190, 336, 401, 347, 191, 459, 386, 319, 358, 23, 97, 281, 213, 500, 383, 106, 350, 85, 181, 206, 451, 282, 150, 40, 261, 463, 79, 30, 315, 242, 126, 83, 189, 333, 340, 237, 388, 27, 35, 163, 190, 417, 111, 330, 244, 466, 396, 169, 313, 183, 15, 377, 40, 282, 394, 71, 40, 38, 116, 144, 60, 287, 288, 203, 145, 434, 80, 240, 446, 46, 54, 170, 296, 232, 344, 303, 87, 12, 363, 66, 423, 244, 392, 484, 439, 236, 453, 440, 292, 496, 465, 461, 96, 56, 52, 435, 431, 205, 455, 124, 209, 458, 172, 283, 272, 47, 188, 210, 167, 174, 90, 397, 464, 207, 374, 208, 393, 376, 479, 423, 421, 241, 373, 450, 323, 462, 178, 17, 17, 425, 27, 19, 226, 72, 480, 198, 45, 437, 139, 61, 246, 290, 17, 122, 240, 189, 254, 109, 315, 99, 205, 315, 316, 222, 161, 500, 381, 441, 187, 384, 411, 53, 240, 338, 376, 464, 267, 71, 166, 310, 35, 93, 336, 210, 219, 474, 336, 249, 199, 406, 255, 198, 41, 305, 204, 449, 104, 357, 422, 433, 451, 19, 117, 393, 394, 486, 256, 228, 402, 398, 291, 416, 239, 71, 497, 169, 423, 9, 349, 129, 205, 406, 122, 375, 44, 357, 493, 100, 484, 27, 175, 400, 24, 319, 224, 343, 86, 58, 205, 177, 385, 442, 465, 392, 315, 217, 254, 357, 291, 125, 82, 378, 174, 235, 232, 251, 215, 35, 364, 350, 389, 274, 191, 243, 128, 391, 397, 65, 89, 38, 241, 5, 230, 8, 147, 7, 129, 148, 58, 491, 406, 225, 306, 263, 11, 191, 265, 363, 19, 91, 80, 136, 372, 498, 319, 347, 405, 168, 6, 375, 54, 344, 188, 360, 115, 24, 188, 31, 284, 487, 286, 429, 287, 39, 105, 181, 426, 2, 66, 155, 99, 221, 17, 248, 211, 266, 476, 444, 38, 25, 159, 434, 318, 160},
                new int[]{324, 423, 402, 387, 14, 475, 345, 109, 56, 306, 386, 142, 265, 175, 380, 404, 131, 465, 490, 290, 223, 447, 143, 417, 26, 445, 159, 484, 292, 398, 301, 262, 239, 388, 1, 85, 219, 311, 134, 356, 306, 445, 168, 332, 484, 52, 360, 156, 415, 341, 394, 290, 496, 75, 205, 29, 454, 353, 183, 253, 37, 204, 99, 439, 263, 424, 117, 463, 22, 237, 48, 366, 406, 4, 461, 475, 309, 208, 39, 89, 14, 337, 34, 260, 495, 62, 489, 490, 358, 6, 166, 500, 36, 444, 148, 385, 337, 254, 423, 351, 204, 391, 199, 375, 287, 43, 421, 420, 21, 300, 278, 99, 435, 453, 228, 19, 374, 225, 321, 465, 313, 284, 122, 412, 193, 400, 355, 96, 223, 174, 330, 111, 394, 25, 339, 295, 274, 105, 398, 126, 487, 467, 7, 197, 359, 84, 391, 385, 460, 259, 442, 449, 29, 348, 227, 477, 147, 399, 53, 322, 458, 29, 71, 7, 160, 455, 150, 77, 193, 431, 303, 185, 260, 157, 251, 10, 93, 350, 238, 230, 115, 401, 6, 148, 484, 164, 5, 390, 28, 485, 433, 256, 19, 282, 366, 92, 255, 77, 181, 34, 194, 177, 95, 346, 92, 186, 187, 243, 182, 381, 497, 63, 99, 72, 170, 70, 56, 95, 299, 362, 136, 420, 177, 266, 117, 79, 426, 418, 462, 323, 196, 100, 489, 489, 83, 30, 467, 465, 302, 247, 359, 139, 57, 309, 298, 44, 414, 69, 468, 456, 131, 64, 449, 323, 17, 448, 458, 166, 453, 12, 1, 324, 70, 257, 62, 255, 137, 481, 247, 91, 36, 399, 476, 109, 389, 179, 261, 8, 114, 312, 74, 345, 299, 406, 259, 234, 105, 193, 156, 327, 131, 297, 204, 277, 433, 461, 370, 117, 109, 482, 405, 25, 403, 247, 200, 364, 11, 231, 8, 352, 410, 372, 234, 367, 436, 15, 211, 168, 494, 256, 249, 69, 228, 494, 117, 213, 444, 76, 420, 196, 371, 405, 434, 446, 340, 83, 415, 199, 193, 365, 394, 249, 489, 187, 231, 61, 483, 119, 316, 469, 350, 175, 256, 404, 47, 439, 454, 430, 236, 416, 62, 55, 29, 434, 429, 86, 229, 106, 81, 462, 441, 311, 6, 173, 233, 454, 25, 402, 72, 464, 361, 42, 278, 54, 90, 472, 8, 257, 160, 471, 14, 360, 167, 391, 183, 292, 416, 25, 253, 208, 163, 498, 485, 157, 315, 452, 339, 381, 131, 283, 298, 271, 110, 475, 212, 196, 328, 467, 215, 282, 254, 88, 205, 24, 377, 269, 301, 97, 129, 299, 87, 283, 145, 479, 405, 321, 157, 421, 12, 190, 478, 368, 300, 474, 464, 64, 329, 397, 127, 190, 355, 150, 379, 337, 35, 415, 212, 288, 152, 431, 491, 342, 112, 53, 82, 131, 489, 255, 20, 227, 358, 120, 125, 311, 155, 161, 426, 309, 21, 367, 10, 237, 398, 254, 249, 428, 123, 106, 281, 413, 230, 26, 428, 369, 422, 486, 140, 343, 300, 13},
                160));
    }

    public double mincostToHireWorkers(int[] quality, int[] wage, int K) {
        int n = quality.length;
        Queue<Double> queue = new PriorityQueue<>();
        double[][] pairs = new double[n][3];
        for (int i = 0; i < n; i++) {
            pairs[i][0] = wage[i] * 1.0 / quality[i];
            pairs[i][1] = quality[i];
        }
        Arrays.sort(pairs, Comparator.comparingDouble(x -> x[0]));
        double result = Double.MAX_VALUE;
        int sum = 0;
        for (double[] pair : pairs) {
            sum += pair[1];
            queue.offer(-pair[1]);
            if (queue.size() > K) {
                sum += queue.poll();
            }
            if (queue.size() == K) {
                result = Math.min(result, sum * pair[0]);
            }
        }
        return result;
    }
}
