import java.util.Stack;

public class Q32 {
    public static void main(String[] args) {
        System.out.println(longestValidParentheses("((()))"));
        System.out.println(longestValidParentheses("((())"));
        System.out.println(longestValidParentheses("((())()"));
        System.out.println(longestValidParentheses(")()())"));
        System.out.println(longestValidParentheses("(()"));
        System.out.println(longestValidParentheses(""));
        System.out.println(longestValidParentheses(")(((((()())()()))()(()))("));
        System.out.println(longestValidParentheses("())()()(())((()(()()(((()))((((())((()(())()())(()((((()))()(()))(())()(())(()(((((())((((((()())())(()(()((())()))(()))))))()(()))((((())()()()))()()()(((()(()())(()()(()(()()(((()))))))()()))())())((()()))))))((()))(((()((())()(()()))((())))()()())))))))()))))(()))))()))()))()((())))((()))(()))))))(((()))))))))()(()()()(())((())()))()()(())))()()))(()())()))(((()())()))((())((((()))(()(()(()()()(((())()(((((()))((()(((((())(()()))((((((((()(()(()(()(())))(())(()())())(()((((()(())((()(())))(())))()(((((()(()()(())))))))())(())(())(()()(((())))((()))(((((()))))())))()((()))()))))())))))((())(((((()()))((((())))(((()(()(())())(((()(()(()()()())))())()))((()((())())()()()(((())(((((()((((((()((()())))((((())((()(((((((()(()((()()()(()(()())(()(()()((((())))()(((()())))(()()))()(()()()()(((((())(()))))((()))())))()((((((()))())))()(()))(())))((((()())(((((()()())(((((())(()())(()))))()(()()))()))))))())))(((())(()(()()))(()))()(((())))())((((()(((()))))))()(()(()))()()(()()))))))))((()))))))(())((()((()))()))((((((()())))))(()((())((((()))))(()(()()()()(()))()()(()(()))(()()(((((((()())(())(()())((())())()(()())((())()())())(()())))())))(())())())(())((()())(((()()))()))()()))()(()(())((((((((())))()((())((()((((((((((()))))(()(((((())(()(()())())))((())())))))()))(()((()()))((()((())()()()((()(())())((())())(()()(((())))))())()()(()))()())(()(()((())))((((()()(())))())(())(()(()(())())())(()()())()(())())))(()()(((())))((()()(((())()()(()())((((()()(()())(()((((()(()()(()(()(((()((()())(()()))(()((((()(((((()))))()()))(((()((((((()(()()()()())()))(()(())))))((()(((()())())))(((()()))(()(()(((((((()()))(()(())))())()(())())(())(()))(())(()))()()(()()())))))()))()((())(((()((((((((())()()))())))((()())("));
        System.out.println(longestValidParentheses("())((()()(()(((()())))))))((((((())()(()()(())()))(()))(()()())((((((()())()()()(()))())(((()(()(())(()((()())())))((()(((()(()((()())())))(())))()))))))))))())()))((())()()()()))((()))(((()))()(()))()((()()()(()))(((()()()()((()()(()())))(())))))))()))))()))()((()())())(()))(((()()()((())())())(((())((()))(())(())()))))(())))()())())()(()))))(())))(())))(()((())(())))((()(()))((((()))))()((()()()())()(())(()(()()())()((())(()((()()()())()))((()))))()))())))))))()((()()))()()()()))(()()()()(())()(()))))()(((((()(((((((()(((())()))(()())()(()))(()(()((()((((()))))()(())(()))))()(()(((((((()))((()(()(()))(()())(()())()(())()(()((((()))))()()()(((())()())()))())()(())))(()()))))(())))))((((()))))(((((()))((((()))((())))))((())))())((((((((()(()((())))()))()()))))))))(((()(()())(()))((())((())(()))))))))((())()()())(()(())()))))((())())(()(())((()())))))((())((())())()(()))(())()()()((((()(()()))()(()(((((()())())())))())()))()))(()())()((()()()()((())()())(((())(((()(()()(((((((()(((()((((()(()((())))())())(())()(()())()((())()()()))()(()())()))()())))()()())))()(((((()()))(())(((()())))(())(())())(())(()()())))()())()))(()))))(()())()(()))((((())()())(())(((()())(()((((((((()))((((())())()((()()())())()()()())()()((()())(()()))((()()))()))(((()((()()(()))()(())()())((())())()(((())))(())((()((())(()()()(()(()))((()((((()(()()(())(()()))))(())()(()()))))())()((())(()))()()(()()()((()))(()))))())((()(()(("));
    }
/*
    public static int longestValidParentheses(String s) {
        int[][] dp = new int[s.length() + 1][s.length() + 1];
        int max = 0;
//        for (int i = 0; i < s.length() - 1; i++) {
//            if (s.charAt(i) == '(' && s.charAt(i + 1) == ')') {
//                dp[i + 1][i + 2] = 2;
//                max = 2;
//            }
//        }

        for (int len = 2; len <= s.length(); len += 2)
            for (int i = 0; i <= s.length() - len; i++) {
                if (s.charAt(i) == ')')
                    continue;
                //i+1 i+len
                if (s.charAt(i) == '(' && s.charAt(i + len - 1) == ')' && (len == 2 || dp[i + 2][i + len - 1] != 0)) {
                    dp[i + 1][i + len] = len;
                    max = Math.max(len, max);
                } else {
                    for (int j = i + 2; j < i + len - 1; j += 2) {
                        if (dp[i + 1][j] != 0 && dp[j + 1][i + len] != 0) {
                            dp[i + 1][i + len] = len;
                            max = Math.max(len, max);
                            break;
                        }
                    }
                }
            }

//        for (int i = 1; i <= s.length(); i++) {
//            System.out.print(i + "-");
//            for (int j = 1; j <= s.length(); j++)
//                System.out.print(dp[i][j] + " ");
//            System.out.println();
//        }


        return max;
    }*/

    public static int longestValidParentheses(String s) {
        int maxLen = 0;
        Stack<Integer> st = new Stack<>();
        st.push(-1);
        for (int i = 0; i < s.length(); i++) {
            int t = st.peek();
            if (t != -1 && s.charAt(t) == '(' && s.charAt(i) == ')') {
                st.pop();
                maxLen = Math.max(maxLen, i - st.peek());
            } else
                st.push(i);
        }
        return maxLen;
    }
}
